// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: pb/center.proto

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CenterClient is the client API for Center service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterClient interface {
	Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Center_HeartbeatClient, error)
	Connect(ctx context.Context, in *CenterConnectRequest, opts ...grpc.CallOption) (*CenterConnectReply, error)
}

type centerClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterClient(cc grpc.ClientConnInterface) CenterClient {
	return &centerClient{cc}
}

func (c *centerClient) Heartbeat(ctx context.Context, opts ...grpc.CallOption) (Center_HeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Center_ServiceDesc.Streams[0], "/msg.Center/Heartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &centerHeartbeatClient{stream}
	return x, nil
}

type Center_HeartbeatClient interface {
	Send(*CenterPing) error
	CloseAndRecv() (*CenterPong, error)
	grpc.ClientStream
}

type centerHeartbeatClient struct {
	grpc.ClientStream
}

func (x *centerHeartbeatClient) Send(m *CenterPing) error {
	return x.ClientStream.SendMsg(m)
}

func (x *centerHeartbeatClient) CloseAndRecv() (*CenterPong, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CenterPong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *centerClient) Connect(ctx context.Context, in *CenterConnectRequest, opts ...grpc.CallOption) (*CenterConnectReply, error) {
	out := new(CenterConnectReply)
	err := c.cc.Invoke(ctx, "/msg.Center/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServer is the server API for Center service.
// All implementations must embed UnimplementedCenterServer
// for forward compatibility
type CenterServer interface {
	Heartbeat(Center_HeartbeatServer) error
	Connect(context.Context, *CenterConnectRequest) (*CenterConnectReply, error)
	mustEmbedUnimplementedCenterServer()
}

// UnimplementedCenterServer must be embedded to have forward compatible implementations.
type UnimplementedCenterServer struct {
}

func (UnimplementedCenterServer) Heartbeat(Center_HeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedCenterServer) Connect(context.Context, *CenterConnectRequest) (*CenterConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedCenterServer) mustEmbedUnimplementedCenterServer() {}

// UnsafeCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServer will
// result in compilation errors.
type UnsafeCenterServer interface {
	mustEmbedUnimplementedCenterServer()
}

func RegisterCenterServer(s grpc.ServiceRegistrar, srv CenterServer) {
	s.RegisterService(&Center_ServiceDesc, srv)
}

func _Center_Heartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CenterServer).Heartbeat(&centerHeartbeatServer{stream})
}

type Center_HeartbeatServer interface {
	SendAndClose(*CenterPong) error
	Recv() (*CenterPing, error)
	grpc.ServerStream
}

type centerHeartbeatServer struct {
	grpc.ServerStream
}

func (x *centerHeartbeatServer) SendAndClose(m *CenterPong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *centerHeartbeatServer) Recv() (*CenterPing, error) {
	m := new(CenterPing)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Center_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CenterConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Center/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).Connect(ctx, req.(*CenterConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Center_ServiceDesc is the grpc.ServiceDesc for Center service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Center_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Center",
	HandlerType: (*CenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Center_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Heartbeat",
			Handler:       _Center_Heartbeat_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/center.proto",
}
